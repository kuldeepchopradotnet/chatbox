Server {
  nsps: {
    '/': Namespace {
      name: '/',
      server: [Circular],
      sockets: [Object],
      connected: [Object],`
      fns: [],
      ids: 0,
      rooms: [],
      flags: {},
      adapter: [Adapter],
      _events: [Object: null prototype],
      _eventsCount: 1
    }
  },
  parentNsps: Map {},
  _path: '/socket.io',
  _serveClient: true,
  parser: {
    protocol: 4,
    types: [
      'CONNECT',
      'DISCONNECT',
      'EVENT',
      'ACK',
      'ERROR',
      'BINARY_EVENT',
      'BINARY_ACK'
    ],
    CONNECT: 0,
    DISCONNECT: 1,
    EVENT: 2,
    ACK: 3,
    ERROR: 4,
    BINARY_EVENT: 5,
    BINARY_ACK: 6,
    Encoder: [Function: Encoder],
    Decoder: [Function: Decoder]
  },
  encoder: Encoder {},
  _adapter: [Function: Adapter],
  _origins: '*:*',
  sockets: Namespace {
    name: '/',
    server: [Circular],
    sockets: {
      IcsSZGI0wSjTgBx4AAAA: [Socket],
      WBSsBRRZwSMYaLhcAAAB: [Socket],
      '02dZEa4WVmlgK-6dAAAC': [Socket]
    },
    connected: {
      IcsSZGI0wSjTgBx4AAAA: [Socket],
      WBSsBRRZwSMYaLhcAAAB: [Socket],
      '02dZEa4WVmlgK-6dAAAC': [Socket]
    },
    fns: [],
    ids: 0,
    rooms: [],
    flags: {},
    adapter: Adapter {
      nsp: [Circular],
      rooms: [Object],
      sids: [Object],
      encoder: Encoder {}
    },
    _events: [Object: null prototype] { connection: [Function] },
    _eventsCount: 1
  },
  eio: Server {
    clients: {
      IcsSZGI0wSjTgBx4AAAA: [Socket],
      WBSsBRRZwSMYaLhcAAAB: [Socket],
      '02dZEa4WVmlgK-6dAAAC': [Socket]
    },
    clientsCount: 3,
    wsEngine: 'ws',
    pingTimeout: 5000,
    pingInterval: 25000,
    upgradeTimeout: 10000,
    maxHttpBufferSize: 100000000,
    transports: [ 'polling', 'websocket' ],
    allowUpgrades: true,
    allowRequest: [Function: bound ],
    cookie: 'io',
    cookiePath: '/',
    cookieHttpOnly: true,
    perMessageDeflate: { threshold: 1024 },
    httpCompression: { threshold: 1024 },
    initialPacket: [ '0' ],
    ws: WebSocketServer {
      _events: [Object: null prototype] {},
      _eventsCount: 0,
      _maxListeners: undefined,
      options: [Object]
    },
    _events: [Object: null prototype] { connection: [Function: bound ] },
    _eventsCount: 1
  },
  httpServer: Server {
    _events: [Object: null prototype] {
      connection: [Function: connectionListener],
      close: [Function: bound ],
      listening: [Function: bound ],
      upgrade: [Function],
      request: [Function]
    },
    _eventsCount: 5,
    _maxListeners: undefined,
    _connections: 5,
    _handle: TCP {
      reading: false,
      onconnection: [Function: onconnection],
      [Symbol(owner)]: [Circular]
    },
    _usingWorkers: false,
    _workers: [],
    _unref: false,
    allowHalfOpen: true,
    pauseOnConnect: false,
    httpAllowHalfOpen: false,
    timeout: 120000,
    keepAliveTimeout: 5000,
    maxHeadersCount: null,
    headersTimeout: 40000,
    _connectionKey: '6::::3000',
    [Symbol(IncomingMessage)]: [Function: IncomingMessage],
    [Symbol(ServerResponse)]: [Function: ServerResponse],
    [Symbol(asyncId)]: 4
  },
  engine: Server {
    clients: {
      IcsSZGI0wSjTgBx4AAAA: [Socket],
      WBSsBRRZwSMYaLhcAAAB: [Socket],
      '02dZEa4WVmlgK-6dAAAC': [Socket]
    },
    clientsCount: 3,
    wsEngine: 'ws',
    pingTimeout: 5000,
    pingInterval: 25000,
    upgradeTimeout: 10000,
    maxHttpBufferSize: 100000000,
    transports: [ 'polling', 'websocket' ],
    allowUpgrades: true,
    allowRequest: [Function: bound ],
    cookie: 'io',
    cookiePath: '/',
    cookieHttpOnly: true,
    perMessageDeflate: { threshold: 1024 },
    httpCompression: { threshold: 1024 },
    initialPacket: [ '0' ],
    ws: WebSocketServer {
      _events: [Object: null prototype] {},
      _eventsCount: 0,
      _maxListeners: undefined,
      options: [Object]
    },
    _events: [Object: null prototype] { connection: [Function: bound ] },
    _eventsCount: 1
  }
}
Server {
  nsps: {
    '/': Namespace {
      name: '/',
      server: [Circular],
      sockets: [Object],
      connected: [Object],
      fns: [],
      ids: 0,
      rooms: [],
      flags: {},
      adapter: [Adapter],
      _events: [Object: null prototype],
      _eventsCount: 1
    }
  },
  parentNsps: Map {},
  _path: '/socket.io',
  _serveClient: true,
  parser: {
    protocol: 4,
    types: [
      'CONNECT',
      'DISCONNECT',
      'EVENT',
      'ACK',
      'ERROR',
      'BINARY_EVENT',
      'BINARY_ACK'
    ],
    CONNECT: 0,
    DISCONNECT: 1,
    EVENT: 2,
    ACK: 3,
    ERROR: 4,
    BINARY_EVENT: 5,
    BINARY_ACK: 6,
    Encoder: [Function: Encoder],
    Decoder: [Function: Decoder]
  },
  encoder: Encoder {},
  _adapter: [Function: Adapter],
  _origins: '*:*',
  sockets: Namespace {
    name: '/',
    server: [Circular],
    sockets: {
      IcsSZGI0wSjTgBx4AAAA: [Socket],
      WBSsBRRZwSMYaLhcAAAB: [Socket],
      '02dZEa4WVmlgK-6dAAAC': [Socket]
    },
    connected: {
      IcsSZGI0wSjTgBx4AAAA: [Socket],
      WBSsBRRZwSMYaLhcAAAB: [Socket],
      '02dZEa4WVmlgK-6dAAAC': [Socket]
    },
    fns: [],
    ids: 0,
    rooms: [],
    flags: {},
    adapter: Adapter {
      nsp: [Circular],
      rooms: [Object],
      sids: [Object],
      encoder: Encoder {}
    },
    _events: [Object: null prototype] { connection: [Function] },
    _eventsCount: 1
  },
  eio: Server {
    clients: {
      IcsSZGI0wSjTgBx4AAAA: [Socket],
      WBSsBRRZwSMYaLhcAAAB: [Socket],
      '02dZEa4WVmlgK-6dAAAC': [Socket]
    },
    clientsCount: 3,
    wsEngine: 'ws',
    pingTimeout: 5000,
    pingInterval: 25000,
    upgradeTimeout: 10000,
    maxHttpBufferSize: 100000000,
    transports: [ 'polling', 'websocket' ],
    allowUpgrades: true,
    allowRequest: [Function: bound ],
    cookie: 'io',
    cookiePath: '/',
    cookieHttpOnly: true,
    perMessageDeflate: { threshold: 1024 },
    httpCompression: { threshold: 1024 },
    initialPacket: [ '0' ],
    ws: WebSocketServer {
      _events: [Object: null prototype] {},
      _eventsCount: 0,
      _maxListeners: undefined,
      options: [Object]
    },
    _events: [Object: null prototype] { connection: [Function: bound ] },
    _eventsCount: 1
  },
  httpServer: Server {
    _events: [Object: null prototype] {
      connection: [Function: connectionListener],
      close: [Function: bound ],
      listening: [Function: bound ],
      upgrade: [Function],
      request: [Function]
    },
    _eventsCount: 5,
    _maxListeners: undefined,
    _connections: 5,
    _handle: TCP {
      reading: false,
      onconnection: [Function: onconnection],
      [Symbol(owner)]: [Circular]
    },
    _usingWorkers: false,
    _workers: [],
    _unref: false,
    allowHalfOpen: true,
    pauseOnConnect: false,
    httpAllowHalfOpen: false,
    timeout: 120000,
    keepAliveTimeout: 5000,
    maxHeadersCount: null,
    headersTimeout: 40000,
    _connectionKey: '6::::3000',
    [Symbol(IncomingMessage)]: [Function: IncomingMessage],
    [Symbol(ServerResponse)]: [Function: ServerResponse],
    [Symbol(asyncId)]: 4
  },
  engine: Server {
    clients: {
      IcsSZGI0wSjTgBx4AAAA: [Socket],
      WBSsBRRZwSMYaLhcAAAB: [Socket],
      '02dZEa4WVmlgK-6dAAAC': [Socket]
    },
    clientsCount: 3,
    wsEngine: 'ws',
    pingTimeout: 5000,
    pingInterval: 25000,
    upgradeTimeout: 10000,
    maxHttpBufferSize: 100000000,
    transports: [ 'polling', 'websocket' ],
    allowUpgrades: true,
    allowRequest: [Function: bound ],
    cookie: 'io',
    cookiePath: '/',
    cookieHttpOnly: true,
    perMessageDeflate: { threshold: 1024 },
    httpCompression: { threshold: 1024 },
    initialPacket: [ '0' ],
    ws: WebSocketServer {
      _events: [Object: null prototype] {},
      _eventsCount: 0,
      _maxListeners: undefined,
      options: [Object]
    },
    _events: [Object: null prototype] { connection: [Function: bound ] },
    _eventsCount: 1
  }
}